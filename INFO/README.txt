
Техстек: Maven, SQLite, JDBC, Lombok, Log4j2.

1) Визначаємо об'єкти (сутності) реального світу.
На основі цих об'єктів сформуємо таблиці БД та
моделі Java-класів

2) Складаємо SQL-запити INFO/SQLs.sql

3) Створюємо Maven-проект.
В Advanced Settings можемо прописати org.example.app

4) Додаємо залежності в pom.xml.

5) В корені проекту створюємо директорію LOGS.

6) Створюємо файл конфігурації для Log4j2:
src/main/resources/log4j2.xml

https://logging.apache.org/log4j/2.x/manual/configuration.html

Згідно документації, з причин ієрархічної природи конфігурації Log4j,
конфігурація в форматі XML легша у використанні, оскільки такий формат
природно підтримує вкладення.

Основні теги XML конфігурації:

<Configuration> - кореневий елемент файлу конфігурації Log4J2
і статус атрибута — це рівень внутрішніх подій Log4J, які ми
хочемо реєструвати.

<Appenders> - цей елемент містить один або більше додавань.
Тут ми налаштуємо додавання, які виводять на системну консоль
стандартний вихід.
https://logging.apache.org/log4j/2.x/manual/appenders.html

<Loggers> - цей елемент може складатися з кількох налаштованих
елементів Реєстраторів. За допомогою спеціального тегу Root
ви можете налаштувати безіменний стандартний реєстратор, який
отримуватиме всі повідомлення журналу від програми. Для кожного
реєстратора можна встановити мінімальний рівень журналу.

<AppenderRef> - цей елемент визначає посилання на елемент із розділу
Appenders. Тому атрибут ‘ref’ пов’язаний з атрибутом ‘name’ додавань.

<PatternLayout> - гнучкий макет, який можна налаштувати за допомогою
рядкового шаблону.
https://logging.apache.org/log4j/2.x/manual/layouts.html#pattern-layout
https://logging.apache.org/log4j/2.x/manual/layouts.html#patterns

Наприклад,
%d{yyyy-MM-dd HH:mm:ss.SSS} – позначка часу: рік-місяць-день
години-хвилини-секунди-мілісекунди.
[%t] – назва потоку, що генерує повідомлення журналу, у квадратних
дужках.
%-5level – рівень події журналювання, доповнений до 5 символів.
%c{1.1.1.*} - показує розташування реєстратора, наприклад,
org.example.app.service.OrderService
в форматі
o.e.a.service.ContactService
%msg%n – повідомлення журналу, за якими йде залежний від платформи
символ розділювача рядків.

7) В src/main/resources створюємо директорію db.

8) Через DB Browser for SQLite (https://sqlitebrowser.org/),
в src/main/resources/db, створюємо файл БД (orders_db.db).

9) Через DB Browser for SQLite створюємо в БД таблицю
orders (див. INFO/SQLs.sql).

УВАГА. Після маніпуляцій в базі даних,
в DB Browser for SQLite, записуємо зміни.

10) Формуємо пакети, класи в org/example/app

11) Перевіряємо працездатність програми.
Файл логів LOGS/app_logs.log може з'явитися після першого
відповідного спрацювання реєстратора логів.
